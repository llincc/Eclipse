package streamtest
import org.apache.spark.SparkConf
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}

object NetworkWordCount {
  def main(args: Array[String]) {
//    if (args.length < 2) {
//      System.err.println("Usage: NetworkWordCount <hostname> <port>")
//      System.exit(1)
//    }
    
   
    // Create the context with a 1 second batch size
    val sparkConf = new SparkConf().setMaster("local[2]").setSparkHome("F:/hadoop/spark-2.3.1-bin-hadoop2.6").setAppName("NetworkWordCount")
    val ssc = new StreamingContext(sparkConf, Seconds(5))
    
    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream("localhost", 9999)
    
    val words = lines.transform{
      rdd => 
      rdd.flatMap(_.split(" "))
    }.window(Seconds(20), Seconds(5)).map((_,1))
    
    words.foreachRDD{
      rdd =>
      println("begin")
      rdd.reduceByKey(_+_).foreach{
        res =>
          println(res._1+ " "+ res._2)
      }
      
    }
//    val words = lines.flatMap(_.split(" "))
//    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
//    wordCounts.print()
    ssc.start()
    ssc.awaitTermination()
  }  
}